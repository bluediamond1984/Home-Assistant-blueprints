blueprint:
  name: SwitchBot Dual Motor Position
  description: Long curtain (>3m) needs 2 motors and work in sync
  author: BlueDiamond
  domain: script

  input:
    cover_id_master:
      name: Curtain master
      description: At the end of the curtain, traveling the most distance
      selector:
        entity:
          domain: cover
          device_class: curtain
    cover_id_slave:
      name: Curtain slave
      description: At the middle of the curtain, traveling the lowest distance
      selector:
        entity:
          domain: cover
          device_class: curtain
    position_master_mid_low:
      name: Master mid low
      description: Furthest master position when slave is fully open (100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
    position_master_mid_high:
      name: Master mid high
      description: Nearest master position when slave is fully closed (0)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider

mode: single

fields:
  position:
    name: Position
    description: Target position
    required: true
    selector:
      number:
        min: 0
        max: 100
        mode: slider

variables:
  # positions: closed = 0 | open = 100
  # initial value
  position: 0
  cover_id_master: !input cover_id_master
  cover_id_slave: !input cover_id_slave
  position_master_mid_low: !input position_master_mid_low
  position_master_mid_high: !input position_master_mid_high
  current_position: "{{ state_attr(cover_id_master,'current_position') }}"
  slave_goto_position: >-
    {% if position <= position_master_mid_high %}
      0
    {% elif position >= position_master_mid_low %}
      100
    {% else %}
      {% set foo = (position + position_master_mid_high)|float(0) |round(0) %}
      {{ iif(foo < 0,0,foo) }}
    {% endif %}

sequence:
  - if:
      - condition: template
        value_template: "{{ position > current_position }}"
    then:
      # opening
      - if:
          - condition: template
            value_template: "{{ current_position < 2 }}"
        then:
          - service: cover.set_cover_position
            target:
              entity_id: !input cover_id_master
            data:
              position: "{{ position }}"
          - delay:
              milliseconds: 500
          - service: cover.set_cover_position
            target:
              entity_id: !input cover_id_slave
            data:
              position: "{{ slave_goto_position }}"
        else:
          - service: cover.set_cover_position
            target:
              entity_id: !input cover_id_master
            data:
              position: "{{ position }}"
          - service: cover.set_cover_position
            target:
              entity_id: !input cover_id_slave
            data:
              position: "{{ slave_goto_position }}"
    else:
      # closing
      - if:
          - condition: template
            value_template: "{{ position <= position_master_mid_high }}"
        then:
          # target position between open en max slave
          - service: cover.set_cover_position
            target:
              entity_id: !input cover_id_master
            data:
              position: "{{ position }}"
          - if:
              # when a error occured and not fully closed
              - condition: template
                value_template: "{{ state_attr(cover_id_slave,'current_position') > 1 }}"
            then:
              - service: cover.set_cover_position
                target:
                  entity_id: !input cover_id_slave
                data:
                  position: 0
        else:
          # target position after max slave
          - service: cover.set_cover_position
            data:
              position: "{{ position }}"
            target:
              entity_id: !input cover_id_master
          - if:
              - condition: template
                value_template: "{{ current_position > position_master_mid_low }}"
            then:
              - delay:
                  seconds: 1
          - service: cover.set_cover_position
            data:
              position: "{{ slave_goto_position }}"
            target:
              entity_id: !input cover_id_slave
